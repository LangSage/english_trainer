#!/usr/bin/env python3
import os, json, random, argparse, time
from pathlib import Path
from gtts import gTTS

# -----------------------------
# Config
# -----------------------------
OUT_DIR = Path('audio')
LANG = 'en'  # English voice
SLOW = False  # gTTS speed

TWO_DIGIT_COUNT = 15
THREE_DIGIT_COUNT = 15
FIVE_DIGIT_COUNT = 10

# Ranges (inclusive)
R2 = (10, 99)
R3 = (100, 999)
R5 = (10000, 99999)


def pick_unique(minv, maxv, count):
    if count > (maxv - minv + 1):
        raise ValueError('Count larger than range')
    return random.sample(range(minv, maxv + 1), count)


essential_banner = """
    # This file was auto-generated by generate_audio.py
    # It defines a global constant MANIFEST used by index.html
    """.strip()


def synth_number(n: int, out_path: Path):
    text = str(n)
    tts = gTTS(text=text, lang=LANG, slow=SLOW)
    tts.save(str(out_path))


def write_manifest_js(manifest, out_dir: Path):
    js_path = out_dir / 'manifest.js'
    with open(js_path, 'w', encoding='utf-8') as f:
        f.write('// ' + essential_banner.replace('\n', ' ') + '\n')
        f.write('const MANIFEST = ')
        json.dump(manifest, f, ensure_ascii=False, indent=2)
        f.write(';\n')
    print(f'✓ wrote {js_path}')


def main():
    parser = argparse.ArgumentParser(description='Generate number audio + manifest.js for Number Trainer')
    parser.add_argument('--seed', type=int, default=None, help='Random seed (optional)')
    parser.add_argument('--overwrite', action='store_true', help='Regenerate even if files exist')
    args = parser.parse_args()

    if args.seed is not None:
        random.seed(args.seed)
    else:
        random.seed(time.time())

    OUT_DIR.mkdir(exist_ok=True)

    nums2 = pick_unique(*R2, TWO_DIGIT_COUNT)
    nums3 = pick_unique(*R3, THREE_DIGIT_COUNT)
    nums5 = pick_unique(*R5, FIVE_DIGIT_COUNT)

    all_numbers = nums2 + nums3 + nums5

    manifest = []

    print(f'Generating {len(all_numbers)} files into {OUT_DIR}/ ...')

    for n in all_numbers:
        mp3_name = f'n_{n}.mp3'
        out_file = OUT_DIR / mp3_name
        if out_file.exists() and not args.overwrite:
            print(f'✓ exists: {mp3_name}')
        else:
            print(f'- synth: {mp3_name}')
            synth_number(n, out_file)
        manifest.append({
            'number': n,
            'file': f'audio/{mp3_name}',
            'digits': len(str(n))
        })

    # Shuffle manifest so quiz order is naturally mixed (UI will shuffle again)
    random.shuffle(manifest)

    write_manifest_js(manifest, OUT_DIR)

    # Simple summary
    c2 = sum(1 for x in manifest if x['digits'] == 2)
    c3 = sum(1 for x in manifest if x['digits'] == 3)
    c5 = sum(1 for x in manifest if x['digits'] == 5)
    print(f'Done. Counts → 2-digit:{c2}, 3-digit:{c3}, 5-digit:{c5}.')
    print('Open index.html (double-click). No server needed.')


if __name__ == '__main__':
    main()
